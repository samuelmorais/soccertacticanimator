// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var tacticJson2 = TacticJson2.FromJson(jsonString);

namespace QuickType

{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TacticJson
    {
        [JsonProperty("playersAnimations")]
        public Dictionary<string, PlayersAnimation[]> PlayersAnimations { get; set; }

        [JsonProperty("ballAnimations")]
        public BallAnimation[] BallAnimations { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Animations")]
        public Animation[] Animations { get; set; }

        [JsonProperty("Team1")]
        public Team Team1 { get; set; }

        [JsonProperty("Team2")]
        public Team Team2 { get; set; }
    }

    public partial class Animation
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("AnimationIndex")]
        public long AnimationIndex { get; set; }

        [JsonProperty("Duration")]
        public double Duration { get; set; }

        [JsonProperty("Events")]
        public Event[] Events { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("Offset")]
        public Offset Offset { get; set; }

        [JsonProperty("Type")]
        public long Type { get; set; }

        [JsonProperty("BodyPart")]
        public long BodyPart { get; set; }

        [JsonProperty("Time")]
        public double Time { get; set; }
    }

    public partial class Offset
    {
        [JsonProperty("x")]
        public double X { get; set; }

        [JsonProperty("y")]
        public double Y { get; set; }

        [JsonProperty("z")]
        public double Z { get; set; }
    }

    public partial class BallAnimation
    {
        [JsonProperty("debug")]
        public bool Debug { get; set; }

        [JsonProperty("KeyFrames")]
        public BallAnimationKeyFrame[] KeyFrames { get; set; }

        [JsonProperty("NumFrames")]
        public long NumFrames { get; set; }
    }

    public partial class BallAnimationKeyFrame
    {
        [JsonProperty("bodyPart")]
        public long BodyPart { get; set; }

        [JsonProperty("eventType")]
        public long EventType { get; set; }

        [JsonProperty("playerIndex")]
        public long PlayerIndex { get; set; }

        [JsonProperty("time")]
        public TimeSpan Time { get; set; }

        [JsonProperty("smooth")]
        public bool Smooth { get; set; }

        [JsonProperty("animIndex")]
        public long AnimIndex { get; set; }

        [JsonProperty("vec")]
        public Offset Vec { get; set; }

        [JsonProperty("Rotation")]
        public float Rotation { get; set; }
    }

    public partial class PlayersAnimation
    {
        [JsonProperty("debug")]
        public bool Debug { get; set; }

        [JsonProperty("NumFrames")]
        public long NumFrames { get; set; }

        [JsonProperty("KeyFrames")]
        public PlayersAnimationKeyFrame[] KeyFrames { get; set; }
    }

    public partial class PlayersAnimationKeyFrame
    {
        [JsonProperty("time")]
        public TimeSpan Time { get; set; }

        [JsonProperty("smooth")]
        public bool Smooth { get; set; }

        [JsonProperty("animIndex")]
        public long AnimIndex { get; set; }

        [JsonProperty("vec")]
        public Offset Vec { get; set; }

        [JsonProperty("Rotation")]
        public float Rotation { get; set; }
    }

    public partial class Team
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Kit")]
        public long Kit { get; set; }

        [JsonProperty("Color1")]
        public string Color1 { get; set; }

        [JsonProperty("Color2")]
        public string Color2 { get; set; }

        [JsonProperty("Color3")]
        public string Color3 { get; set; }

        [JsonProperty("Players")]
        public Player[] Players { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Number")]
        public int Number { get; set; }

        [JsonProperty("HairStyle")]
        public int HairStyle { get; set; }

        [JsonProperty("SkinColor")]
        public int SkinColor { get; set; }

        [JsonProperty("HairColor")]
        public int HairColor { get; set; }

        [JsonProperty("FaceStyle")]
        public int FaceStyle { get; set; }

        [JsonProperty("PlayerIndex")]
        public int PlayerIndex { get; set; }
    }

    public partial class TacticJson
    {
        public static TacticJson FromJson(string json) => JsonConvert.DeserializeObject<TacticJson>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TacticJson self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    
}
